package inventory.management.system.inventory;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.Document;
import database.DBConnection;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.time.LocalDate;
import java.time.Month;
import java.time.ZoneId;
import java.util.Date;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sanuja
 */
public class manageorder extends javax.swing.JFrame {

    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    int id;
    String prname;

    public manageorder() throws SQLException {
        initComponents();
        con = DBConnection.connectDB();
        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT productname FROM stock");
            while (rs.next()) {
                productname.addItem(rs.getString(1));
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
        showRecord();
        updateIncome();

    }

    public void updateIncome() {
        try {
            rs = stmt.executeQuery("SELECT SUM(total) FROM `order`");
            rs.next();
            total.setText(rs.getString(1));
        } catch (SQLException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void showRecord() {
        try {

            stmt = con.createStatement();
            String query = "SELECT * FROM `order`";
            ResultSet re = stmt.executeQuery(query);
            view.setModel(DbUtils.resultSetToTableModel(re));
            query = "SELECT MONTH(orderdate) FROM `order`";
            re = stmt.executeQuery(query);
            re.next();
        } catch (Exception e) {

            System.out.println(e);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buyercontact = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        customercontact = new javax.swing.JTextField();
        customername = new javax.swing.JTextField();
        customeraddress = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        productdesc = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        view = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        saveOrderButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        supplier = new javax.swing.JTextField();
        setDetailsButton = new javax.swing.JButton();
        productname = new javax.swing.JComboBox<>();
        exportButton = new javax.swing.JButton();
        selectMonth = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buyercontact.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setText("MANAGE ORDER");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Address");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Contact No");

        customercontact.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        customername.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        customername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customernameActionPerformed(evt);
            }
        });

        customeraddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Product Details:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Product Name");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Rate");

        price.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Quantity");

        quantity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Product Description");

        productdesc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        view.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        view.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(view);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("Buyer Details:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("Total Income");

        total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setText("Delete Order");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveOrderButton.setBackground(new java.awt.Color(153, 204, 255));
        saveOrderButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveOrderButton.setText("Save");
        saveOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOrderButtonActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 102, 102));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setText("Close");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Suppplier");

        setDetailsButton.setText("Set Other Details");
        setDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDetailsButtonActionPerformed(evt);
            }
        });

        productname.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                productnameItemStateChanged(evt);
            }
        });
        productname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productnameActionPerformed(evt);
            }
        });

        exportButton.setBackground(new java.awt.Color(0, 204, 102));
        exportButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        exportButton.setText("Export Data");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        selectMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));

        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel8.setText("Select the Month");

        javax.swing.GroupLayout buyercontactLayout = new javax.swing.GroupLayout(buyercontact);
        buyercontact.setLayout(buyercontactLayout);
        buyercontactLayout.setHorizontalGroup(
            buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(buyercontactLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(customername, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addComponent(customercontact, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(customeraddress, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(202, 202, 202))
            .addComponent(jSeparator3)
            .addGroup(buyercontactLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(28, 28, 28)
                        .addComponent(productname, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supplier)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addGap(28, 28, 28)
                        .addComponent(productdesc, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(buyercontactLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(saveOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))))
                .addGap(68, 68, 68))
            .addGroup(buyercontactLayout.createSequentialGroup()
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(setDetailsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(buyercontactLayout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(jLabel13)
                    .addContainerGap(1299, Short.MAX_VALUE)))
        );
        buyercontactLayout.setVerticalGroup(
            buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyercontactLayout.createSequentialGroup()
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(customercontact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customeraddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(productdesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(setDetailsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(17, 17, 17))
                    .addGroup(buyercontactLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))))
            .addGroup(buyercontactLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(buyercontactLayout.createSequentialGroup()
                    .addGap(168, 168, 168)
                    .addComponent(jLabel13)
                    .addContainerGap(500, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buyercontact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buyercontact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed

    }//GEN-LAST:event_quantityActionPerformed

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed

    }//GEN-LAST:event_totalActionPerformed

    private void customernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customernameActionPerformed

    private void saveOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOrderButtonActionPerformed
        try {
            stmt = con.createStatement();
            String Proname = (String) productname.getSelectedItem();
            String Supplier = supplier.getText();
            String customerName = customername.getText();
            String customerAddress = customeraddress.getText();
            String customerContact = customercontact.getText();
            int Qty = Integer.parseInt(quantity.getText());
            int Rate = Integer.parseInt(price.getText());
            int Total = Rate * Qty;
            String Prodescription = productdesc.getText();

            String query = "INSERT INTO `order` (productname,supplier,quantity,rate,total,productdescription,customername,customercontact,customeraddress) VALUES(?,?,?,?,?,?,?,?,?)";
            PreparedStatement preparedstmt = con.prepareStatement(query);
            preparedstmt.setString(1, Proname);
            preparedstmt.setString(2, Supplier);
            preparedstmt.setInt(3, Qty);
            preparedstmt.setInt(4, Rate);
            preparedstmt.setInt(5, Total);
            preparedstmt.setString(6, Prodescription);
            preparedstmt.setString(7, customerName);
            preparedstmt.setString(8, customerContact);
            preparedstmt.setString(9, customerAddress);

            preparedstmt.execute();
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT quantity FROM stock WHERE productname='" + Proname + "'");
            rs.next();
            int qt = Integer.parseInt(rs.getString(1));
            String queryUpdate = "UPDATE stock SET quantity = ? WHERE productname ='" + Proname + "'";
            PreparedStatement preparedstmtupdate = con.prepareStatement(queryUpdate);
            preparedstmtupdate.setInt(1, (qt - Qty));
            preparedstmtupdate.execute();
            Reset();
            showRecord();
            updateIncome();
            JOptionPane.showMessageDialog(null, "NEW ORDER CREATED!!");

        } catch (Exception e) {

            System.out.println(e);
        }
    }//GEN-LAST:event_saveOrderButtonActionPerformed

    public void Reset() {

        customername.setText("");
        customeraddress.setText("");
        customercontact.setText("");
        supplier.setText("");
        price.setText("");
        quantity.setText("");
        productdesc.setText("");

    }


    private void productnameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_productnameItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_productnameItemStateChanged

    private void productnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productnameActionPerformed

    private void setDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDetailsButtonActionPerformed
        try {
            stmt = con.createStatement();
            String Proname = (String) productname.getSelectedItem();
            rs = stmt.executeQuery("SELECT supplier,rate,quantity,productdescription FROM stock WHERE productname='" + Proname + "'");
            rs.next();
            quantity.setText(rs.getString(3));
            supplier.setText(rs.getString(1));
            productdesc.setText(rs.getString(4));
            price.setText(rs.getString(2));

        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_setDetailsButtonActionPerformed

    private void viewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewMouseClicked
        DefaultTableModel click = (DefaultTableModel) view.getModel();
        int selectedIndex = view.getSelectedRow();
        id = Integer.parseInt(click.getValueAt(selectedIndex, 0).toString());
        prname = (String) click.getValueAt(selectedIndex, 1).toString();
    }//GEN-LAST:event_viewMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to Delete this record?", "Danger", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                System.out.println("lk");
                //when deleting a row from order table add values of quantities stock table related row 
                stmt = con.createStatement();
                rs = stmt.executeQuery("SELECT quantity FROM stock WHERE productname='" + prname + "'");
                rs.next();
                System.out.println(rs.getString(1));
                int qt = Integer.parseInt(rs.getString(1));
                System.out.println("lk");
                ResultSet rs_update = stmt.executeQuery("SELECT quantity FROM `order` WHERE orderid='" + id + "'");
                rs_update.next();
                System.out.println("jk");
                String queryUpdate = "UPDATE stock SET quantity = ? WHERE productname ='" + prname + "'";
                PreparedStatement preparedstmtupdate = con.prepareStatement(queryUpdate);
                preparedstmtupdate.setInt(1, (qt + Integer.parseInt(rs_update.getString(1))));
                preparedstmtupdate.execute();

                stmt = con.createStatement();
                String queryDelete = "DELETE FROM `order` WHERE orderid = '" + id + "'";
                stmt.executeUpdate(queryDelete);
                JOptionPane.showMessageDialog(null, "ORDER DELETED!!");
                showRecord();
                updateIncome();
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    public String getMonth(int i) {
        switch (i) {
            case 1:
                return "January";
            case 2:
                return "February";
            case 3:
                return "March";
            case 4:
                return "April";
            case 5:
                return "May";
            case 6:
                return "June";
            case 7:
                return "July";
            case 8:
                return "August";
            case 9:
                return "September";
            case 10:
                return "October";
            case 11:
                return "November";
            case 12:
                return "December";
        }

        return "";
    }

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        LocalDate currentdate = LocalDate.now();
        Month currentmonth = currentdate.getMonth();
        Date date = new Date();
        LocalDate local = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        int month = local.getMonthValue();
        int selectmonth = Integer.parseInt((String) selectMonth.getSelectedItem());

        try {
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT * FROM `order` WHERE MONTH(orderdate)='" + selectmonth + "'");
        } catch (SQLException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }

        Document report = new Document();

        report.setMargins(0, 0, 50, 0);

        try {
            PdfWriter.getInstance(report, new FileOutputStream("Monthly Report For " + getMonth(selectmonth) + ".pdf"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }

        report.open();
        report.addTitle("Monthly Report for " + selectmonth);
        PdfPTable my_report_table = new PdfPTable(11);
        Font f1 = new Font(Font.FontFamily.HELVETICA, 7);
        my_report_table.setHeaderRows(1);
        my_report_table.addCell(new Phrase("Order ID", f1));
        my_report_table.addCell(new Phrase("Product Name", f1));
        my_report_table.addCell(new Phrase("Supplier", f1));
        my_report_table.addCell(new Phrase("Quantity", f1));
        my_report_table.addCell(new Phrase("Rate", f1));
        my_report_table.addCell(new Phrase("Total Price", f1));
        my_report_table.addCell(new Phrase("Product Description", f1));
        my_report_table.addCell(new Phrase("Customer Name", f1));
        my_report_table.addCell(new Phrase("Customer Contact", f1));
        my_report_table.addCell(new Phrase("Customer Address", f1));
        my_report_table.addCell(new Phrase("Odered Date", f1));
        //create a cell object
        PdfPCell table_cell;

        try {
            while (rs.next()) {
                String orderId = rs.getString("orderid");
                table_cell = new PdfPCell(new Phrase(orderId, f1));
                my_report_table.addCell(table_cell);
                String productName = rs.getString("productname");
                table_cell = new PdfPCell(new Phrase(productName, f1));
                my_report_table.addCell(table_cell);
                String supplier = rs.getString("supplier");
                table_cell = new PdfPCell(new Phrase(supplier, f1));
                my_report_table.addCell(table_cell);
                String quantity = rs.getString("quantity");
                table_cell = new PdfPCell(new Phrase(quantity, f1));
                my_report_table.addCell(table_cell);
                String rate = rs.getString("rate");
                table_cell = new PdfPCell(new Phrase(rate, f1));
                my_report_table.addCell(table_cell);
                String total = rs.getString("total");
                table_cell = new PdfPCell(new Phrase(total, f1));
                my_report_table.addCell(table_cell);
                String productDescription = rs.getString("productdescription");
                table_cell = new PdfPCell(new Phrase(productDescription, f1));
                my_report_table.addCell(table_cell);
                String customerName = rs.getString("customername");
                table_cell = new PdfPCell(new Phrase(customerName, f1));
                my_report_table.addCell(table_cell);
                String customerContact = rs.getString("customercontact");
                table_cell = new PdfPCell(new Phrase(customerContact, f1));
                my_report_table.addCell(table_cell);
                String customerAddress = rs.getString("customeraddress");
                table_cell = new PdfPCell(new Phrase(customerAddress, f1));
                my_report_table.addCell(table_cell);
                String orderdate = rs.getString("orderdate");
                table_cell = new PdfPCell(new Phrase(orderdate, f1));
                my_report_table.addCell(table_cell);

            }

        } catch (SQLException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            /* Attach report table to PDF */
            report.add(my_report_table);
        } catch (DocumentException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            report.add(new Paragraph("\n"));
        } catch (DocumentException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            rs = stmt.executeQuery("SELECT SUM(total) FROM `order` WHERE MONTH(orderdate)='" + selectmonth + "'");
        } catch (SQLException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        String s;
        try {
            s = "Total Income for " + getMonth(selectmonth) + " : " + rs.getString(1);
            Paragraph para = new Paragraph(s);
            report.add(para);
        } catch (SQLException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
        }

        report.close();
        JOptionPane.showMessageDialog(null, "REPORT EXPORTED!!");
    }//GEN-LAST:event_exportButtonActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        setVisible(false);
        InventroyDasgboard view = new InventroyDasgboard();
        view.setVisible(true);
    }//GEN-LAST:event_jLabel6MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manageorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manageorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manageorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manageorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new manageorder().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(manageorder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buyercontact;
    private javax.swing.JTextField customeraddress;
    private javax.swing.JTextField customercontact;
    private javax.swing.JTextField customername;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField price;
    private javax.swing.JTextField productdesc;
    private javax.swing.JComboBox<String> productname;
    private javax.swing.JTextField quantity;
    private javax.swing.JButton saveOrderButton;
    private javax.swing.JComboBox<String> selectMonth;
    private javax.swing.JButton setDetailsButton;
    private javax.swing.JTextField supplier;
    private javax.swing.JTextField total;
    private javax.swing.JTable view;
    // End of variables declaration//GEN-END:variables
}
